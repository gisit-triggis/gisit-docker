services:
  nginx:
    container_name: GISIT_nginx
    restart: always
    image: nginx:alpine
    ports:
      - "80:80"
      - "3000:3000"
      - "8080:8080"
      - "9090:9090"
      - "9091:9091"
      - "9092:9092"
      - "443:443"
    volumes:
      - ./config/nginx/$NGINX_ENV.conf:/etc/nginx/conf.d/default.conf:ro
      - ./config/cert:/etc/nginx/certs:ro
    depends_on:
      - backend

  redis:
    container_name: GISIT_redis
    restart: always
    image: redis:alpine
    volumes:
      - redis_data:/data

  redis-exporter:
    container_name: GISIT_redis-exporter
    image: oliver006/redis_exporter
    environment:
      - REDIS_ADDR=redis://redis:6379

  postgis:
    container_name: GISIT_postgis
    restart: always
    image: postgis/postgis:15-3.3
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgis_data:/var/lib/postgresql/data

  postgres-exporter:
    container_name: GISIT_postgres-exporter
    image: quay.io/prometheuscommunity/postgres-exporter
    environment:
      - DATA_SOURCE_NAME=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgis:5432/${POSTGRES_DB}?sslmode=disable
    depends_on:
      - postgis

  backend:
    container_name: GISIT_backend
    restart: always
    build:
      context: ./src/gisit-backend
      dockerfile: Dockerfile
    working_dir: /var/www
    depends_on:
      - redis
      - postgis
    volumes:
      - ./src/gisit-backend:/var/www
      - ./config/backend/.env:/var/www/.env
      - ./config/backend/.rr.yaml:/var/www/.rr.yaml

  realtime-backend:
    container_name: GISIT_realtime-backend
    restart: always
    build:
      context: ./src/gisit-realtime-backend
      dockerfile: Dockerfile
      secrets:
        - github_token
    environment:
      - SCYLLADB_HOST=scylla
      - SCYLLA_USER=${SCYLLA_USER}
      - SCYLLA_PASS=${SCYLLA_PASS}
      - GRPC_PORT=9090
      - HTTP_PORT=8080
      - REDIS_REALTIME_HOST=redis
    depends_on:
      - scylla

  scylla:
    container_name: GISIT_scylla
    image: scylladb/scylla
    restart: always
    command: --authenticator PasswordAuthenticator --authorizer CassandraAuthorizer
    volumes:
      - "scylla-data:/var/lib/scylla/data"
    environment:
      SCYLLA_USER: ${SCYLLA_USER}
      SCYLLA_PASS: ${SCYLLA_PASS}
    healthcheck:
      test: [
        "CMD",
        "cqlsh",
        "scylla",
        "-u", "${SCYLLA_USER}",
        "-p", "${SCYLLA_PASS}",
        "-e", "DESCRIBE KEYSPACES;"
      ]
      interval: 10s
      timeout: 5s
      retries: 12

  ai-backend:
    container_name: GISIT_ai-backend
    restart: always
    build:
      context: "./src/gisit-ai-backend"
      dockerfile: Dockerfile

  zookeeper:
    container_name: GISIT_zookeeper
    restart: always
    image: confluentinc/cp-zookeeper:7.5.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    container_name: GISIT_kafka
    restart: always
    image: confluentinc/cp-kafka:7.5.0
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
    volumes:
      - ./config/kafka/kafka-init.sh:/kafka-init.sh
    entrypoint: [ "/bin/bash", "-c" ]
    command: |
      "/etc/confluent/docker/run & 
       sleep 10 && 
       /kafka-init.sh && 
       wait"

  kafka-ui:
    container_name: GISIT_kafka-ui
    restart: always
    image: provectuslabs/kafka-ui:latest
    ports:
      - "9000:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    depends_on:
      - kafka

  clickhouse:
    image: clickhouse/clickhouse-server:latest
    container_name: GISIT_clickhouse
    ulimits:
      nofile:
        soft: 262144
        hard: 262144
    volumes:
      - clickhouse_data:/var/lib/clickhouse
    environment:
      CLICKHOUSE_DB: ${CLICKHOUSE_DB}
      CLICKHOUSE_USER: ${CLICKHOUSE_USER}
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD}

  prometheus:
    image: prom/prometheus:latest
    container_name: GISIT_prometheus
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml

  grafana:
    image: grafana/grafana:latest
    container_name: GISIT_grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_PASS}
    volumes:
      - grafana-storage:/var/lib/grafana
    depends_on:
      - prometheus

volumes:
  redis_data:
  postgis_data:
  scylla-data:
  clickhouse_data:
  grafana-storage:

secrets:
  github_token:
    environment: GITHUB_TOKEN